//
//  CodeGenerator.swift
//  ColorListGenerator
//
//  Created by griffin-stewie on 2015/05/18.
//  Copyright (c) 2015 net.cyan-stivy. All rights reserved.
//

import Foundation

public enum Code: String, CaseIterable, Decodable {
    case swift = "swift"
    case objc = "objc"
    case android = "android"

    public static var allCasesDescription: String {
        return self.allCases.map{String($0.rawValue)}.joined(separator: ", ")
    }

    public func generateCode(_ colors: [Color], directory: String) {
        switch self {
        case .swift:
            func classFunc(_ color: Color) -> String {

                let methodName = color.name.camelCase().sanitizeAsMethodName()

                let code = "    static let \(methodName): UIColor = " +
                    "#colorLiteral(red: \(Double(color.color.redComponent)), green: \(Double(color.color.greenComponent)), blue: \(Double(color.color.blueComponent)), alpha: \(Double(color.color.alphaComponent)))\n\n"
                return code
            }

            func generateSwiftFile(_ colors: [Color], directory: String) {
                var code = """
                           // Palette generated by clg

                           import UIKit

                           extension UIColor {


                           """

                for c in colors {
                    code += classFunc(c)
                }

                code += "}"

                do {
                    let path = URL(fileURLWithPath: directory.appending(pathComponent: "AppColors.swift").standardizingPath()).path
                    try code.write(toFile: path, atomically: true, encoding: String.Encoding.utf8)
                    print("SUCCESS: saved to \(path)")
                } catch {
                    #if DEBUG
                    print(error)
                    #endif
                }
            }

            generateSwiftFile(colors, directory: directory)

        case .objc:
            func classMethodInterface(_ color: Color) -> String {
                let methodName: String = color.name.camelCase().sanitizeAsMethodName() + "Color"
                let code = "+ (UIColor *)clg_\(methodName);\n\n"
                return code
            }

            func classMethodImplementation(_ color: Color) -> String {

                let methodName: String = color.name.camelCase().sanitizeAsMethodName() + "Color"

                let code = "+ (UIColor *)clg_\(methodName)\n" +
                "{\n" +
                "    return [UIColor colorWithRed:\(Double(color.color.redComponent)) green:\(Double(color.color.greenComponent)) blue:\(Double(color.color.blueComponent)) alpha:\(Double(color.color.alphaComponent))];\n" +
                "}\n\n"
                return code
            }

            func generateObjCHeaderFile(_ colors: [Color], fileName: String) {
                var code = """
                           @import UIKit;

                           @interface UIColor (CLRGeneratedAdditions)


                           """
                for c in colors {
                    code += classMethodInterface(c)
                }

                code += "@end"

                do {
                    let filePath = ((directory as NSString).appendingPathComponent("UIColor+CLRGeneratedAdditions.h") as NSString).standardizingPath
                    let path = URL(fileURLWithPath:filePath).path
                    try code.write(toFile: path,
                                   atomically: true,
                                   encoding: String.Encoding.utf8)
                    print("SUCCESS: saved to \(path)")
                } catch  {
                    #if DEBUG
                    print(error)
                    #endif
                }
            }

            func generateObjCImplementationFile(_ colors: [Color], fileName: String) {
                let headerFileName = "UIColor+CLRGeneratedAdditions.h"
                var code = """
                           #import "\(headerFileName)"

                           @implementation UIColor (CLRGeneratedAdditions)


                           """
                
                for c in colors {
                    code += classMethodImplementation(c)
                }

                code += "@end"


                do {
                    let filePath = ((directory as NSString).appendingPathComponent("UIColor+CLRGeneratedAdditions.m") as NSString).standardizingPath
                    let path = URL(fileURLWithPath:filePath).path
                    try code.write(toFile: path, atomically: true, encoding: String.Encoding.utf8)
                    print("SUCCESS: saved to \(path)")
                } catch {
                    #if DEBUG
                    print(error)
                    #endif
                }
            }

            generateObjCHeaderFile(colors, fileName: directory)
            generateObjCImplementationFile(colors, fileName: directory)

        case .android:
            func colorElement(_ color: Color) -> String {
                let name: String = color.name.snakeCase().sanitizeAsMethodName()
                return "    <color name=\"\(name)\">\(color.hexStringRepresentation())</color>\n"
            }

            func generateColorXMLFile(_ colors: [Color], fileName: String) {
                var code = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                    + "\n"
                    + "<resources>"
                    + "\n"
                    + "    <!-- Palette generated by clg -->"
                    + "\n"
                    + "\n"

                for c in colors {
                    code += colorElement(c)
                }

                code += "</resources>"

                do {
                    let filePath = ((directory as NSString).appendingPathComponent("colors.xml") as NSString).standardizingPath
                    let path = URL(fileURLWithPath:filePath).path
                    try code.write(toFile: path, atomically: true, encoding: String.Encoding.utf8)
                    print("SUCCESS: saved to \(path)")
                } catch {
                    #if DEBUG
                    print(error)
                    #endif
                }
            }

            generateColorXMLFile(colors, fileName: directory)
        }
    }

}
